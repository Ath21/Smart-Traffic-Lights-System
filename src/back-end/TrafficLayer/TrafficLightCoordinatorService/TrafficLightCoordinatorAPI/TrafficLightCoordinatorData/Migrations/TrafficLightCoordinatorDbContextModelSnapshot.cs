// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrafficLightCoordinatorData;

#nullable disable

namespace TrafficLightCoordinatorData.Migrations
{
    [DbContext(typeof(TrafficLightCoordinatorDbContext))]
    partial class TrafficLightCoordinatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrafficLightCoordinatorData.Entities.Intersection", b =>
                {
                    b.Property<Guid>("IntersectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("intersection_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("InstalledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("installed_at");

                    b.Property<string>("Location")
                        .HasColumnType("jsonb")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("IntersectionId");

                    b.HasIndex("Status");

                    b.ToTable("intersections");
                });

            modelBuilder.Entity("TrafficLightCoordinatorData.Entities.TrafficConfiguration", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("config_id");

                    b.Property<Guid>("IntersectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("intersection_id");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("pattern");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ConfigId");

                    b.HasIndex("IntersectionId", "UpdatedAt");

                    b.ToTable("traffic_configurations");
                });

            modelBuilder.Entity("TrafficLightCoordinatorData.Entities.TrafficLight", b =>
                {
                    b.Property<Guid>("LightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("light_id");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("current_state");

                    b.Property<Guid>("IntersectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("intersection_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("LightId");

                    b.HasIndex("IntersectionId", "UpdatedAt");

                    b.ToTable("traffic_lights");
                });

            modelBuilder.Entity("TrafficLightCoordinatorData.Entities.TrafficConfiguration", b =>
                {
                    b.HasOne("TrafficLightCoordinatorData.Entities.Intersection", "Intersection")
                        .WithMany("Configurations")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("TrafficLightCoordinatorData.Entities.TrafficLight", b =>
                {
                    b.HasOne("TrafficLightCoordinatorData.Entities.Intersection", "Intersection")
                        .WithMany("Lights")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("TrafficLightCoordinatorData.Entities.Intersection", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Lights");
                });
#pragma warning restore 612, 618
        }
    }
}
