// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrafficLightData;

#nullable disable

namespace TrafficLightData.Migrations
{
    [DbContext(typeof(TrafficLightDbContext))]
    [Migration("20250911192505_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrafficLightData.Entities.Intersection", b =>
                {
                    b.Property<Guid>("IntersectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("intersection_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("InstalledAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("installed_at");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("IntersectionId");

                    b.HasIndex("Status");

                    b.ToTable("intersections");
                });

            modelBuilder.Entity("TrafficLightData.Entities.TrafficConfiguration", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("config_id");

                    b.Property<string>("ChangeRef")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("change_ref");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("EffectiveFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("effective_from")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("IntersectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("intersection_id");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pattern");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.HasKey("ConfigId");

                    b.HasIndex("ChangeRef")
                        .IsUnique()
                        .HasFilter("[change_ref] IS NOT NULL");

                    b.HasIndex("IntersectionId", "EffectiveFrom")
                        .HasDatabaseName("ix_cfg_intersection_effective");

                    b.ToTable("traffic_configurations");
                });

            modelBuilder.Entity("TrafficLightData.Entities.TrafficLight", b =>
                {
                    b.Property<Guid>("LightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("light_id");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("current_state");

                    b.Property<Guid>("IntersectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("intersection_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("LightId");

                    b.HasIndex("IntersectionId", "UpdatedAt");

                    b.ToTable("traffic_lights", t =>
                        {
                            t.HasCheckConstraint("ck_traffic_lights_state", "current_state IN ('RED','ORANGE','GREEN','FLASHING','OFF')");
                        });
                });

            modelBuilder.Entity("TrafficLightData.Entities.TrafficConfiguration", b =>
                {
                    b.HasOne("TrafficLightData.Entities.Intersection", "Intersection")
                        .WithMany("Configurations")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("TrafficLightData.Entities.TrafficLight", b =>
                {
                    b.HasOne("TrafficLightData.Entities.Intersection", "Intersection")
                        .WithMany("Lights")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("TrafficLightData.Entities.Intersection", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Lights");
                });
#pragma warning restore 612, 618
        }
    }
}
