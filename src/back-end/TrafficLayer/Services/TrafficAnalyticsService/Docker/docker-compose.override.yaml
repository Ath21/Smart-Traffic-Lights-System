services:
  traffic_analytics_api:
    ports:
      - '5208:8080'
    environment:
      # ===============================
      # ASP.NET Core
      # ===============================
      ASPNETCORE_ENVIRONMENT: Development

      # ===============================
      # Databases
      # ===============================

      ## TrafficAnalyticsDB (PostgreSQL)
      PostgreSQL__ConnectionString: Host=traffic_analytics_db;Port=5432;Database=TrafficAnalyticsDB;Username=postgres;Password=postgres123

      ## DetectionCacheDB (Redis)
      Redis__Host: detection_cache_db
      Redis__Port: 6379
      Redis__Password: ""
      Redis__Database: 0
      Redis__KeyPrefix__VehicleCount: sensor:{intersection_id}:vehicle_count
      Redis__KeyPrefix__PedestrianCount: sensor:{intersection_id}:pedestrian_count
      Redis__KeyPrefix__CyclistCount: sensor:{intersection_id}:cyclist_count
      Redis__KeyPrefix__EmergencyDetected: sensor:{intersection_id}:emergency_detected
      Redis__KeyPrefix__PublicTransportDetected: sensor:{intersection_id}:public_transport_detected
      Redis__KeyPrefix__IncidentDetected: sensor:{intersection_id}:incident_detected

      # ===============================
      # CORS Policy
      # ===============================
      Cors__AllowedOrigins: http://localhost:5173
      Cors__AllowedMethods: GET,POST,PUT,PATCH,DELETE
      Cors__AllowedHeaders: Content-Type,Authorization

      # ===============================
      # JWT Authentication
      # ===============================
      Jwt__Issuer: http://stls_backend:8080
      Jwt__Audience: http://stls_backend:8080
      Jwt__Key: Nn7kLa8Rzv1XHt9UwMqP4YbFdJxVt2Km

      # ===============================
      # RabbitMQ Connection
      # ===============================
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Port: 5672
      RabbitMQ__Username: rabbitmq
      RabbitMQ__Password: rabbitmq123

      # ===============================
      # RabbitMQ Exchanges
      # ===============================

      ## TRAFFIC.EXCHANGE
      RabbitMQ__Exchanges__Traffic: TRAFFIC.EXCHANGE
      # --- Publish
      RabbitMQ__RoutingKeys__Traffic__Congestion: traffic.analytics.congestion.{intersection_id}
      RabbitMQ__RoutingKeys__Traffic__Summary: traffic.analytics.summary.{intersection_id}
      RabbitMQ__RoutingKeys__Traffic__Incident: traffic.analytics.incident.{intersection_id}

      ## SENSOR.EXCHANGE
      RabbitMQ__Exchanges__Sensor: SENSOR.EXCHANGE
      # --- Consume
      RabbitMQ__Queues__Sensor__Analytics: sensor.data.analytics.queue
      RabbitMQ__RoutingKeys__Sensor__VehicleCount: sensor.vehicle.count.{intersection_id}
      RabbitMQ__RoutingKeys__Sensor__EmergencyVehicle: sensor.emergency_vehicle.detected.{intersection_id}
      RabbitMQ__RoutingKeys__Sensor__PublicTransport: sensor.public_transport.detected.{intersection_id}
      RabbitMQ__RoutingKeys__Sensor__PedestrianCount: sensor.pedestrian.count.{intersection_id}
      RabbitMQ__RoutingKeys__Sensor__CyclistCount: sensor.cyclist.count.{intersection_id}
      RabbitMQ__RoutingKeys__Sensor__IncidentDetected: sensor.incident.detected.{intersection_id}

      ## LOG.EXCHANGE
      RabbitMQ__Exchanges__Log: LOG.EXCHANGE
      # --- Publish
      RabbitMQ__RoutingKeys__Log__Audit: log.traffic.analytics_service.audit
      RabbitMQ__RoutingKeys__Log__Error: log.traffic.analytics_service.error

    restart: always
