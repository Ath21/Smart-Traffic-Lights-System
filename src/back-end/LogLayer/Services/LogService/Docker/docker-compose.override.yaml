services:
  log_api:
    ports:
      - '5005:8080'
    environment:
      # ===============================
      # ASP.NET Core
      # ===============================
      ASPNETCORE_ENVIRONMENT: Development

      # ===============================
      # Databases
      # ===============================

      ## LogDB (MongoDB)
      Mongo__ConnectionString: mongodb://mongo:mongo123@log_db:27017
      Mongo__Database: LogDB
      Mongo__AuditLogsCollection: audit_logs
      Mongo__ErrorLogsCollection: error_logs

      # ===============================
      # CORS Policy
      # ===============================
      Cors__AllowedOrigins: http://localhost:5173
      Cors__AllowedMethods: GET,POST,PUT,PATCH,DELETE
      Cors__AllowedHeaders: Content-Type,Authorization

      # ===============================
      # JWT Authentication
      # ===============================
      Jwt__Issuer: http://stls_backend:8080
      Jwt__Audience: http://stls_backend:8080
      Jwt__Key: Nn7kLa8Rzv1XHt9UwMqP4YbFdJxVt2Km

      # ===============================
      # RabbitMQ Connection
      # ===============================
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Port: 5672
      RabbitMQ__Username: rabbitmq
      RabbitMQ__Password: rabbitmq123

      # ===============================
      # RabbitMQ Exchanges
      # ===============================

      ## LOG.EXCHANGE
      RabbitMQ__Exchanges__Log: LOG.EXCHANGE
      # --- Consume (Queues)
      RabbitMQ__Queues__UserAudit: log.user_layer.audit.queue
      RabbitMQ__Queues__TrafficAudit: log.traffic_layer.audit.queue
      RabbitMQ__Queues__SensorAudit: log.sensor_layer.audit.queue
      RabbitMQ__Queues__UserError: log.user_layer.error.queue
      RabbitMQ__Queues__TrafficError: log.traffic_layer.error.queue
      RabbitMQ__Queues__SensorError: log.sensor_layer.error.queue

      # --- Consume (Routing Keys - User Layer)
      RabbitMQ__RoutingKeys__User__UserServiceAudit: log.user.user_service.audit
      RabbitMQ__RoutingKeys__User__NotificationServiceAudit: log.user.notification_service.audit
      RabbitMQ__RoutingKeys__User__UserServiceError: log.user.user_service.error
      RabbitMQ__RoutingKeys__User__NotificationServiceError: log.user.notification_service.error

      # --- Consume (Routing Keys - Traffic Layer)
      RabbitMQ__RoutingKeys__Traffic__AnalyticsAudit: log.traffic.analytics_service.audit
      RabbitMQ__RoutingKeys__Traffic__CoordinatorAudit: log.traffic.coordinator_service.audit
      RabbitMQ__RoutingKeys__Traffic__IntersectionAudit: log.traffic.intersection_controller_service.audit
      RabbitMQ__RoutingKeys__Traffic__LightControllerAudit: log.traffic.light_controller_service.audit
      RabbitMQ__RoutingKeys__Traffic__AnalyticsError: log.traffic.analytics_service.error
      RabbitMQ__RoutingKeys__Traffic__CoordinatorError: log.traffic.coordinator_service.error
      RabbitMQ__RoutingKeys__Traffic__IntersectionError: log.traffic.intersection_controller_service.error
      RabbitMQ__RoutingKeys__Traffic__LightControllerError: log.traffic.light_controller_service.error

      # --- Consume (Routing Keys - Sensor Layer)
      RabbitMQ__RoutingKeys__Sensor__SensorAudit: log.sensor.sensor_service.audit
      RabbitMQ__RoutingKeys__Sensor__DetectionAudit: log.sensor.detection_service.audit
      RabbitMQ__RoutingKeys__Sensor__SensorError: log.sensor.sensor_service.error
      RabbitMQ__RoutingKeys__Sensor__DetectionError: log.sensor.detection_service.error

    depends_on:
      log_db:
        condition: service_started
    restart: always
